function placeText(myFiles, size) {	/*		1. get text		2. insert all reference material		3. flow all pages		4. process reference material		5. remove extra pages		Text needs to all flow before processing references material 		as in some cases when ID recalculates text position when adding new frames 		things can shift by a few words and make items out of place.	*/	var i,currentPage = myDocument.pages[0],prevFrame,footnote_frame_col_1,myFrame;		f2 = f1 = f2_1 = f1_1 = 1;			for (i = 0; i < myFiles.length; i++) {		myq = 1;		lastdate = ''		lastChapter = ''		lastNote = ''		//$.writeln("starting file " + myFiles[i].name)		//$.writeln("on page: " + currentPage.name + " at: " + end())				// get file		myFile = myFiles[i];		// set var		var chapter_number = last_chapter_number = currentDate = "";				// if not first file add new page		currentPage = i > 0 ? timeit(create_page,[myDocument.pages[-1]]) : currentPage = timeit(create_page)		myFrame = currentPage.textFrames.itemByName('frame1')		// place text		myFrame.place(myFile, false);		// get book name and remove from text		book_name = timeit(get_book_name,[myFrame])		// remove page # on first page		size === "small" && currentPage.itemByName('page-number').remove();		heading = timeit(get_content_array,['heading'])		cross = timeit(get_content_array,['cross'])		note = timeit(get_content_array,['note'])		date = timeit(get_content_array,['date'])		//note = note.reverse()		//$.writeln(note)		timeit(format_text,[myFrame]);		firstFrame = myFrame		// if size is large, add next text frame, then move to next page.		size === "large" && myFrame = myFrame.nextTextFrame		// flow text 		f=0		while (myFrame.overflows) {						// add next page			currentPage = timeit(create_page,[currentPage]);			// if this is the first page of the book then we can add the 			// book name box and delete the page #.. for small size.			f === 0 && size === "small" && currentPage.itemByName('page-number').remove()			// if size is large, add next text frame, then move to next page.						myFrame = size === "large" ? currentPage.textFrames.itemByName('frame2') : myFrame = currentPage.textFrames.itemByName('frame1')						//if (f == '0'){break}			f++//break;		}				// put reference material in the correct place		myFrame = firstFrame		while (myFrame && myFrame.contents.length > 0){			// balance frames when finished footnotes			try{                if (!myFrame.nextTextFrame.nextTextFrame) {                    // balance frames when finished footnotes                    timeit(balanceFrames,[myFrame.nextTextFrame])                    //break;                }            } catch(e){}								app.windows[0].activePage = myFrame.parentPage			timeit(new_foot,[myFrame])			// sometimes when adding footnotes the last frame will overflow. 			// if it does add a new page after.			try{	            if (currentPage.textFrames.itemByName('frame2').overflows && !currentPage.textFrames.itemByName('frame2').nextTextFrame) {					nextCurrentPage = timeit(create_page,[currentPage]);				}            } catch(e){}						timeit(new_ref,[myFrame])			try{	            if (!myFrame.nextTextFrame.nextTextFrame) {	                timeit(adjustFootFrame)    	            }            } catch(e){}			//referenceMaterial(myFrame); 				//sectionMarkers(myFrame);					if (size == "large"){			//	metrical_fix(myFrame)			}			(myFrame.name == 'frame2' || (size=="small" && currentPage.side == PageSideOptions.RIGHT_HAND)) && timeit(change_style_on_headings_in_col_2,[myFrame])			myq !== 1 && timeit(create_page_heading,[myq, myFrame]);						timeit(release_anchored_objects);			// insert a soft line break at the end of each text frame to help smooth			// out text flow issues. somehow ID reflows text when stuff later on changes.			// addin this in will help to minimize it.			// if statement - only add the line break if there is not a paragraph end.			app.findGrepPreferences = app.changeGrepPreferences = null;			app.findGrepPreferences.findWhat = "\\r"			try{				me = myFrame.lines[-1].findGrep()			}			catch(e){me='asdf'}			app.findGrepPreferences.findWhat = "$"			try{				me = myFrame.lines[-1].findGrep()			}			catch(e){}			if(me.length==0){								// if the last letter is not a space then add a hyphen.								if(myFrame.lines[-1].characters[-1].contents != " " && myFrame.lines[-1].characters[-1].contents != SpecialCharacters.DISCRETIONARY_LINE_BREAK){									myFrame.lines[-1].characters[-1].insertionPoints[-1].contents ='-'				}						myFrame.lines[-1].characters[-1].insertionPoints[-1].contents = SpecialCharacters.FORCED_LINE_BREAK 			}			if (size == 'large' && myFrame.name == 'frame2'){				myq++			}			else if (size == 'small'){myq++}					// set last chapter number			if(myFrame.name=='frame2' || size=="small"){				lastChapter = chapter				}			myFrame = myFrame.nextTextFrame						//if (myq == '2'){break}		}	}}function get_last_date(myFrame) {	try{		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "^(?:\\d+\\s\\K)?(?:.+?)\\d+(?:.+?)?BC$";		myFinds = myFrame.findGrep()		if (myFinds) {			return "00 " + myFinds[myFinds.length - 1].contents.concat(String.fromCharCode(13))		} else {			return ""		}	} catch(e){		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "^(?:\\d+\\s\\K)?(?:.+?)?(AD)(?:.+?)?\\d+(?:.+?)?$";		myFinds = myFrame.findGrep()		if (myFinds) {			return "00 " + myFinds[myFinds.length - 1].contents.concat(String.fromCharCode(13))		} else {			return ""		}	}}function increment(value) {	return String.fromCharCode(value.charCodeAt(0) + 1);}function RoundNumbers(doc) {	var err;	try {		var theParas = doc.stories.everyItem().paragraphs.everyItem().getElements().slice(0)	} catch (err) {		var theParas = []	}	for (var i = 0; i < theParas.length; i++) {		try {			var theText = theParas[i];			theText.leftIndent = Math.round(theText.leftIndent * 10) / 10;		} catch (e) {}	}}function insert_notes_and_references(myFrame) {	var myFindChangeFile, myScriptFile, myResult;	var myFindChangeArray, myFindVerse, myFindChapter, myChangeText;	var myStartCharacter, myEndCharacter;	var the_arr = File($.fileName).fsName.split('/');    the_arr.splice(-2, 2);    path = the_arr.join('/')	var myFindChangeFile = path + "/note&cf.txt"	if (myFindChangeFile != null) {		myFindChangeFile = File(myFindChangeFile);		var myResult = myFindChangeFile.open("r", undefined, undefined);		if (myResult == true) {			//Loop through the find/change operations.			do {				myLine = myFindChangeFile.readln();				myFindChangeArray = myLine.split("\t");				myFindBook = myFindChangeArray[0];				myFindType = myFindChangeArray[1];				myFindChapter = myFindChangeArray[2];				myFindVerse = myFindChangeArray[3];				myFindWordNum = myFindChangeArray[4];				myFindWordNum = myFindWordNum - 1;				myFindWord = myFindChangeArray[5];				myChangeText = myFindChangeArray[6];				switch (myFindType) {					case "note":						insertFootnote(myFrame, myFindBook, myFindChapter, myFindVerse, myFindWordNum, myFindWord, myChangeText);						break;					case "cross":						insertCross(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText, 'cross');						break;					case "heading":						insertHeading(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText);						break;					case "date":						insertCross(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText, 'date');						break;				}			} while (myFindChangeFile.eof == false);			myFindChangeFile.close();		}	}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = ";";		app.changeGrepPreferences.changeTo = ";~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = "-";		app.changeGrepPreferences.changeTo = "-~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = "\\*";		app.changeGrepPreferences.changeTo = "*~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = ",";		app.changeGrepPreferences.changeTo = ",~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = "~~";		app.changeGrepPreferences.changeTo = "~~~k";		myFrame.parentStory.changeGrep()	} catch (e) {}		}function insertFootnote(myFrame, myFindBook, myFindChapter, myFindVerse, myFindWordNum, myFindWord, myChangeText) {	if (myFindBook.toUpperCase() == book_name.toUpperCase()) {		if (myFindVerse == 1 || myFindWordNum <= 0) { // && myFindWordNum  != -1){			if (myFindWordNum <= 0 && myFindVerse == 1) {				app.changeGrepPreferences = app.findGrepPreferences = null;				app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<\\K";			} else {				app.changeGrepPreferences = app.findGrepPreferences = null;				app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<\\K(?=" + myFindWord + ")";			}		} else {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<" + myFindVerse + "(~%|\\t)+(\\b\\w+?(-\\b\\w+?)?\\b.+?){" + myFindWordNum + "}\\<\\K(?=" + myFindWord + ")";		}		try {			me = myFrame.parentStory.findGrep();			me1 = me[0].insertionPoints[0];			me1.contents = myChangeText;		} catch (e) {			try {				app.changeGrepPreferences = app.findGrepPreferences = null;				app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<" + myFindVerse + "(~%|\\t)+[^\"]+?\\<\\K(?=" + myFindWord + ")";				try {					me = myFrame.parentStory.findGrep();					me1 = me[0].insertionPoints[0];					me1.contents = myChangeText;				} catch (e) {alert(e)}			} catch (e) {alert(e)}		}	}}function insertCross(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText, type) {	if (myFindBook.toUpperCase() == book_name.toUpperCase()) {		if (myFindVerse == 1) {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b(\\t+)?\\K";		} else {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<" + myFindVerse + "(~%|\\t)+\\K";		}		if (me = myFrame.parentStory.findGrep() != "") {			me = myFrame.parentStory.findGrep()			me1 = me[0].insertionPoints[0];			if (type == 'date') {				me1.contents = '{' + myFindVerse + ' ' + myChangeText + '}'			} else {				me1.contents = myChangeText			};		}	}}function insertHeading(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText) {	if (myFindBook.toUpperCase() == book_name.toUpperCase()) {		if (myFindVerse == 1) {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "Chapter\\s" + myFindChapter + "~b";			try {				me = myFrame.parentStory.findGrep()				me1 = me[0].insertionPoints[0];				me1.contents = myChangeText + String.fromCharCode(13);			} catch (e) {}		} else {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "Chapter " + myFindChapter + "~b[^\"]+?\\K(?=\\s\\<" + myFindVerse + ")";			try {				me = myFrame.parentStory.findGrep()				me1 = me[0].insertionPoints[0];				me1.contents = myChangeText + String.fromCharCode(13);			} catch (e) {}		}	}}function sectionMarkers(myFrame) {	app.findGrepPreferences = app.changeGrepPreferences = null;	if (book_name.toUpperCase() != 'PSALMS') {		app.findGrepPreferences.findWhat = "0(?=\\n|~b)";		try {			if (myFinds = myFrame.findGrep() != "") {				myFinds = myFrame.findGrep();				flq = myFinds.length;				while (flq--) {					var new_note = myFinds[flq].paragraphs[0].insertionPoints[0].textFrames.add({						appliedObjectStyle: myDocument.objectStyles.item("Section Marker"),						appliedParagraphStyle: myDocument.paragraphStyles.item("Section Marker")					});					myFinds[flq].parentStory.insertionPoints.itemByRange(myFinds[flq].texts[0].insertionPoints[0].index + 1, myFinds[flq].texts[0].insertionPoints[-1].index + 1).texts[0].move(LocationOptions.atBeginning, new_note.insertionPoints[0]);					new_note.parentStory.characters.item(0).appliedParagraphStyle = myDocument.paragraphStyles.item("Section Marker");					new_note.fit(FitOptions.frameToContent);					with(new_note.anchoredObjectSettings) {						anchoredPosition = AnchorPosition.anchored;						anchorPoint = AnchorPoint.BOTTOM_LEFT_ANCHOR;						horizontalReferencePoint = AnchoredRelativeTo.TEXT_FRAME;						horizontalAlignment = HorizontalAlignment.leftAlign;						verticalReferencePoint = VerticallyRelativeTo.LINE_BASELINE;					}					new_note.geometricBounds = [new_note.geometricBounds[0], new_note.geometricBounds[3] - 3, new_note.geometricBounds[2], new_note.geometricBounds[3]];				}			}		} catch (e) {}	} else {		app.findGrepPreferences.findWhat = "(0)(?= PSALM)";		app.changeGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("Section Marker");		app.changeGrepPreferences.changeTo = "$1";		myFrame.parentStory.changeGrep();	}}function move_chapter_numbers_to_anchored_frames(myFrame) {	myPage = myFrame.parentPage	app.changeGrepPreferences = app.findGrepPreferences = null;	app.findGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("ChapterNum")	app.findGrepPreferences.findWhat = "\\<\\d\\>";	newFrameBaseline = 0	var lastNote	try {		if (myFinds = myFrame.findGrep() != "") {			myFinds = myFrame.findGrep();			flq = myFinds.length;			if (myFrame.name == 'frame2'|| (size == "small" && myPage.side == PageSideOptions.RIGHT_HAND)) {				chapter_location = "right"			}			else {				chapter_location = "left"			}			while (flq--) {				if (myFinds[flq].appliedParagraphStyle == myDocument.paragraphStyles.item("Verse1")) {					var new_note = myFinds[flq].insertionPoints[0].textFrames.add();					myFinds[flq].parentStory.insertionPoints.itemByRange(myFinds[flq].texts[0].insertionPoints[0].index + 1, myFinds[flq].texts[0].insertionPoints[-1].index + 1).texts[0].move(LocationOptions.atBeginning, new_note.insertionPoints[0]);					new_note.parentStory.characters.item(0).appliedParagraphStyle = myDocument.paragraphStyles.item("ChapterNum")					new_note.fit(FitOptions.frameToContent);										if (chapter_location == "right") {						new_note.appliedObjectStyle = myDocument.objectStyles.item("Chapter Marker Right")					} else {						new_note.appliedObjectStyle = myDocument.objectStyles.item("Chapter Marker")					}					new_note.fit(FitOptions.frameToContent);				}				app.findGrepPreferences = null				app.findGrepPreferences.findWhat = "~>";				app.changeGrepPreferences.changeTo = "\\s"				myFrame.changeGrep()				new_note.fit(FitOptions.frameToContent);				new_note.anchoredObjectSettings.releaseAnchoredObject();			}		}	} catch (e) {$.writeln(e)}	app.findGrepPreferences = app.changeGrepPreferences = null	app.findGrepPreferences.findWhat = "^\\K~%"	app.changeGrepPreferences.changeTo = '\\t'	try {		myFrame.changeGrep()	} catch (e) {}}function myFindFile(myFilePath) {	var myScriptFile = myGetScriptPath();	var myScriptFile = File(myScriptFile);	var myScriptFolder = myScriptFile.path;	myFilePath = myScriptFolder + myFilePath;	if (File(myFilePath).exists == false) {		//Display a dialog.		myFilePath = File.openDialog("Choose the file containing your find/change list");	}	return myFilePath;}function myGetScriptPath() {	try {		myFile = app.activeScript;	} catch (myError) {		myFile = myError.fileName;	}	return myFile;}function get_content_array(file){	me = File($.fileName).fsName.split('/')	me.splice(-2,3)	file = File(me.join('/') + '/' + 'content' + '/' + file + '.txt')	file.open("r")	array = []	do {		line = file.readln().split("\t");		if (line[0].toUpperCase() == book_name.toUpperCase()) {		array.push(line)		}	} while (file.eof == false);	return array}function get_book_name(myFrame) {	app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat = "<<.*?>>~b";	me = myDocument.findGrep();	if (me[0].contents) {		book_name = me[0].contents.substring(2, me[0].contents.length - 3);		app.changeGrepPreferences.changeTo = "";		myDocument.changeGrep();		return book_name;	}}