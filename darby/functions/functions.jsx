function placeText(myFiles, size) {	//var myFiles = [1], //	//$.writeln("setting column variables")	main_frame_bottom = meta.page_height - meta.bottom_margin	left_column_left = meta.page_width / 2 - meta.column_width / 2 - meta.left_margin	left_column_right = meta.page_width / 2 + meta.gutter / 2	right_column_left = meta.page_width / 2 - meta.gutter / 2	right_column_right = meta.page_width - (meta.page_width - meta.column_width) / 2 + meta.right_margin	var i,		currentPage = myDocument.pages[0],		prevFrame, footnote_frame_col_1,		myFrame;	f2 = f1 = f2_1 = f1_1 = 1	for (i = 0; i < myFiles.length; i++) {		$.writeln("starting file: " + i)		myFile = myFiles[i];		// for some books we want to use always 1 column.. sos for example		//if (myFile.toString().indexOf("22") !== -1) {		//	alert("sos")				//size="small"			//}		var book_name = chapter_number = last_chapter_number = currentDate = "";		if (i > 0) {			currentPage = addPageAfter(currentPage)		}		$.writeln("adding maing text frame")		myFrame = addMainTextFrame(size, currentPage);		//try {		$.writeln("placing text")		myFrame.place(myFile, false);		$.writeln("get book name")		book_name = get_book_name(myFrame);		$.writeln("format_text")		format_text(myFrame, currentPage);		$.writeln("reference material")		referenceMaterial(currentPage, myFrame); 		$.writeln("sectionMarkers")		sectionMarkers(myFrame);		if (size == "small") {			create_page_heading("1", currentPage, myFrame);			if ( currentPage.side == PageSideOptions.RIGHT_HAND) {				change_style_on_headings_in_col_2(myFrame)			}		}		$.writeln("moving chapter nums to anchored frames")		move_chapter_numbers_to_anchored_frames(currentPage, myFrame)		if (size == "large") {					$.writeln("if large")			$.writeln("metrical fix")			metrical_fix(myFrame)			myFrame = myFrame.nextTextFrame			$.writeln("referenceMaterial")			referenceMaterial(currentPage, myFrame);			$.writeln("sectionMarkers")			sectionMarkers(myFrame);			$.writeln( "change_style_on_headings_in_col_2")			change_style_on_headings_in_col_2(myFrame)			$.writeln( "create_page_heading")			create_page_heading("1", currentPage, myFrame);			myFrame = myFrame.previousTextFrame			myFrame = myFrame.nextTextFrame			$.writeln( "move_chapter_numbers_to_anchored_frames")			move_chapter_numbers_to_anchored_frames(currentPage, myFrame)					$.writeln("end if large")		}				//release_anchored_objects();		//	alert('Unable to place file: ' + myFile, 'Multi-file auto-place');		//	continue;		//}		while (myFrame.overflows) {			$.writeln( "adding next page: " + app.activeWindow.activePage.name)			currentPage = addPageAfter(currentPage);			prevFrame = myFrame;			$.writeln( "adding main text frame")			myFrame = addMainTextFrame(size, currentPage);			prevFrame.nextTextFrame = myFrame;			$.writeln( "reference material")						referenceMaterial(currentPage, myFrame); // crashes here on small size			if (size == "small") {				$.writeln( "if small")				$.writeln( "create_page_heading")				create_page_heading("2", currentPage, myFrame);				if (currentPage.side == PageSideOptions.RIGHT_HAND) {								$.writeln( "change_style_on_headings_in_col_2")									change_style_on_headings_in_col_2(myFrame)				}				$.writeln( "end if small")			}			$.writeln( "sectionMarkers")			sectionMarkers(myFrame);			$.writeln( "move_chapter_numbers_to_anchored_frames")			move_chapter_numbers_to_anchored_frames(currentPage, myFrame)													if (size == "large") {				$.writeln( "if large")				myFrame = myFrame.nextTextFrame				$.writeln( "referenceMaterial")									referenceMaterial(currentPage, myFrame);									$.writeln( "sectionMarkers")				sectionMarkers(myFrame);				$.writeln( "change_style_on_headings_in_col_2")				change_style_on_headings_in_col_2(myFrame)				$.writeln( "create_page_heading")				create_page_heading("2", currentPage, myFrame)				myFrame = myFrame.previousTextFrame				myFrame = myFrame.nextTextFrame				$.writeln( "move_chapter_numbers_to_anchored_frames")				move_chapter_numbers_to_anchored_frames(currentPage, myFrame)				$.writeln( "end iflarge")			}			//release_anchored_objects();		}		//currentPage = addPageAfter(currentPage);	}}function addMainTextFrame(size, aPage) {		aFrame = aPage.textFrames.add()		//"left" means inside; "right" means outside.	if (size == "small") {		if (app.activeDocument.documentPreferences.facingPages && aPage.side == PageSideOptions.LEFT_HAND) {			aFrame.geometricBounds = [meta.top_margin, meta.left_margin, main_frame_bottom, meta.page_width - meta.right_margin];		} else {			aFrame.geometricBounds = [meta.top_margin, meta.right_margin, main_frame_bottom, meta.page_width - meta.left_margin];		}	} 	else if (size == "large") {		aFrame.geometricBounds = [meta.top_margin, left_column_left, main_frame_bottom, left_column_right] // was 44.5 // was 48.5		aFrame2 = aPage.textFrames.add()		aFrame2.geometricBounds = [meta.top_margin, right_column_left, main_frame_bottom, right_column_right]		aFrame.nextTextFrame = aFrame2;	}	return aFrame;}function addBookTextFrame(aPage) {	var 		aFrame = aPage.textFrames.add(),		areFacing = app.activeDocument.documentPreferences.facingPages,		myTop = meta.top_margin,		myBottom = main_frame_bottom,		myLeft = meta.right_margin,		myRight = meta.page_width - meta.left_margin;	if (size == "small") {		myRight = meta.page_width - meta.reference_margin	}	//"left" means inside; "right" means outside.	if (areFacing && aPage.side == PageSideOptions.LEFT_HAND) {		myLeft = meta.left_margin;		myRight = meta.page_width - meta.right_margin;		if (size == "small") {			myleft = meta.reference_margin		}	}	aFrame.geometricBounds = [myTop, myLeft, myBottom, myRight];	aFrame.appliedObjectStyle = myDocument.objectStyles.item("Book Name Frame")	if (size == "small") {		aFrame.textFramePreferences.insetSpacing = [0, 0, "4.5mm", meta.left_margin - meta.reference_margin];		if (areFacing && aPage.side == PageSideOptions.LEFT_HAND) {			aFrame.textFramePreferences.insetSpacing = [0, meta.left_margin - meta.reference_margin, "4.5mm", 0];		}	}	return aFrame;}function addPageAfter(aPage) {	new_page = myDocument.pages.add(LocationOptions.AFTER, aPage)	if (size == "large") {		new_page.marginPreferences.properties = {			top: meta.top_margin,			left: left_column_left,			right: right_column_right,			bottom: meta.bottom_margin		}	}	if (size == "small") {		new_page.marginPreferences.properties = {			top: meta.top_margin,			left: meta.right_margin,			right: meta.left_margin,			bottom: meta.bottom_margin		}	}	return new_page;}/*function myGetBounds(myDocument, myPage) {	var myPageWidth = myDocument.documentPreferences.pageWidth;	var myPageHeight = myDocument.documentPreferences.pageHeight	if (myPage.side == PageSideOptions.leftHand) {		var myX2 = myPage.marginPreferences.left;		var myX1 = myPage.marginPreferences.right;	} else {		var myX2 = myPage.marginPreferences.right;		var myX1 = myPage.marginPreferences.left;	}	var myY1 = myPage.marginPreferences.top;	var myX2 = myPageWidth - myX2;	var myY2 = myPageHeight - myPage.marginPreferences.bottom;	return [myY1, myX1, myY2, myX2];}*/function finda(myFrame) {	app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat = "<";	try {		footNote = myFrame.findGrep()	} catch (e) {		footnote = ""	}	app.findGrepPreferences.findWhat = "\\{"; 	try {		crossReference = myFrame.findGrep();	} catch (e) {		crossReference = ""	}	return (footNote != "" || crossReference != "")}function findv(myFrame) {	app.changeGrepPreferences = app.findGrepPreferences = null;	app.findGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("VerseNum")	app.findGrepPreferences.findWhat = "\\<\\d+\\>";	try {		myFinds = myFrame.findGrep()	} catch (e) {		myFinds = ""	}	return (myFinds )}function referenceMaterial(myPage, myFrame) {	myCrossFrame = undefined;	var f_results = "",		found = [],		crossReference, footNote, z = 0,		currentNote = lastNote = currentReference = lastReference = lastDate = "";	if ((Math.round(myFrame.geometricBounds[3] - 4) < (myPage.bounds[3] - myPage.bounds[1]) / 2) && size == "large") {		column = 1		footnote_frame_col_1 = ""	} else if (size == "large") {		column = 2	} else {		column = 1	}	i=0	while ( number_of_verses = findv(myFrame).length  || finda(myFrame) ) {				$.writeln("reference while " + i)		i+=1		// foot notes			$.writeln("footnotes")		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "<.*?>";		if (found = myFrame.findGrep() != "") {			found = myFrame.findGrep();			for (q = 0; q < found.length; q++) {				me = found[q].contents.substring(1, found[q].contents.length - 1);				currentReference = String(me.match(/\d+:\d+\s[a-z]\s/));				currentNote = found[q].contents.substring(currentReference.length + 1, found[q].contents.length - 1);				// check if note is existing on page already				existingLocation = f_results.indexOf(currentNote);				if (f_results == "") {					f_results = found[q].contents.substring(1, found[q].contents.length - 1);				} else {					if (currentNote !== lastNote && existingLocation < 0) {						if (currentReference.substring(0, currentReference.length - 2) == lastReference.substring(0, lastReference.length - 2)) {							f_results = f_results.concat(String.fromCharCode(8203, 8194, 8203)).concat(currentReference.substring(currentReference.length - 2, currentReference.length - 1)).concat(String.fromCharCode(8198)).concat(currentNote);						} else {							f_results = f_results.concat(String.fromCharCode(8203, 8194, 8203)).concat(found[q].contents.substring(1, found[q].contents.length - 1))						}					} else {						if (currentReference !== lastReference) {							f_results = f_results.slice(0, existingLocation - 1) + ", " + currentReference + f_results.slice(existingLocation);						}					}				}				lastNote = currentNote;				lastReference = currentReference;			}			app.changeGrepPreferences.changeTo = "";			myFrame.changeGrep();		}		// footnotes that are stuck in a page transition		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "<";		if (found = myFrame.findGrep() != "") {			app.findGrepPreferences = app.changeGrepPreferences = null;			app.findGrepPreferences.findWhat = "<.+?>";			found = myFrame.parentStory.findGrep();			app.findTextPreferences = app.changeTextPreferences = null;			app.findTextPreferences.findWhat = found[0].contents;			if (found = myFrame.parentStory.findText() != "") {				found = myFrame.parentStory.findText();				if (f_results == "") {					me = found[0].contents.substring(1, found[0].contents.length - 1);					me2 = me.match(/\d+:\d+\s\l\s\K.+?"/);					f_results = f_results.concat(found[0].contents.substring(1, found[0].contents.length - 1));				} else {					f_results = f_results.concat(String.fromCharCode(8203, 8194, 8203)).concat(found[0].contents.substring(1, found[0].contents.length - 1)); //8195				}				app.changeTextPreferences.changeTo = "";				myFrame.parentStory.changeText();			}		}		if (f_results) {			if (z == 0) {				if (column == 2 && footnote_frame_col_1 != "") {					myNoteFrame.contents = myNoteFrame.contents.concat(String.fromCharCode(8203, 8194, 8203)).concat(f_results);				} else {					myNoteFrame = addFootnoteTextFrame(myPage)					footnote_frame_col_1 = 1					myNoteFrame.contents = f_results;				}			} else myNoteFrame.contents = myNoteFrame.contents.concat(String.fromCharCode(8203, 8194, 8203)).concat(f_results);			myNoteFrame.parentStory.characters.item(0).appliedParagraphStyle = myDocument.paragraphStyles.item("Footnote")			f_results = "", found = [];			footnoteSuperscript(myNoteFrame);			bold(myNoteFrame, "\\d+:\\d+");			noBreak(myNoteFrame, "\\d+:\\d+\\s\\l\\s[\\l\\u]+");		}$.writeln("cross references")		// cross reference		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "\\{.+?\\}";// was \\{\\}		f_results = currentDate			//f2 = lastDate		if (found = myFrame.findGrep() != "") {			found = myFrame.findGrep();			for (q = 0; q < found.length; q++) {				//	alert(found[q].insertionPoints[0].horizontalOffset)				//if (size !== "large" || size == "large" && found[q].insertionPoints[0].horizontalOffset < 75) {				f_results = f_results.concat(found[q].contents.substring(1, found[q].contents.length - 1)).concat(String.fromCharCode(13));				//}				//if (size == "large" && found[q].insertionPoints[0].horizontalOffset >= 75) {				//	f2 = f2.concat(found[q].contents.substring(1, found[q].contents.length - 1)).concat(String.fromCharCode(13));				//}			}			app.changeGrepPreferences.changeTo = "";			myFrame.changeGrep();		}		// cross references that are stuck in a page transition		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "\\{";		if (found = myFrame.findGrep() != "") {			app.findGrepPreferences = app.changeGrepPreferences = null;			app.findGrepPreferences.findWhat = "\\{.+?\\}";			found = myFrame.parentStory.findGrep();			app.findTextPreferences = app.changeTextPreferences = null;			app.findTextPreferences.findWhat = found[0].contents;			if (found = myFrame.parentStory.findText() != "") {				found = myFrame.parentStory.findText();				if (f_results == "") {					f_results = found[0].contents.substring(1, found[0].contents.length - 1);				} else {					f_results = f_results.concat(found[0].contents.substring(1, found[0].contents.length - 1)).concat(String.fromCharCode(13));				}				app.changeTextPreferences.changeTo = "";				myFrame.parentStory.changeText();			}		}		/*****	put verse numbers in the margin *****/		newFrameBaseline = 0		var lastNote$.writeln("verse numbers")			$.writeln("find_first_baseline")			first_baseline = find_first_baseline(myFrame)			//$.writeln("starting for loop with batch of: " + number_of_verses)			if (column == 2 || (size == "small" && myPage.side == PageSideOptions.RIGHT_HAND)) {				verse_location="left"			} else {				verse_location="right"			}		$.writeln("adding verse numbers")		for (a=0; a<number_of_verses;a++){			//$.writeln("verse number: " + a + " of " + number_of_verses)						myFinds=findv(myFrame)			//$.writeln(myFinds[0].contents)			if (verse_location=="left") {								var new_note = myFinds[0].insertionPoints[-1].textFrames.add({					appliedObjectStyle: myDocument.objectStyles.item("Verse Marker Right"),				});				myFinds[0].texts[-1].move(LocationOptions.atBeginning, new_note.insertionPoints[0]);			} else {				var new_note = myFinds[0].insertionPoints[-1].textFrames.add({					appliedObjectStyle: myDocument.objectStyles.item("Verse Marker"),				});				myFinds[0].texts[-1].move(LocationOptions.atBeginning, new_note.insertionPoints[0]);				//new_note.fit(FitOptions.frameToContent);			}						new_note.fit(FitOptions.frameToContent);						if (verse_location =="left"){				new_note.appliedObjectStyle = myDocument.objectStyles.item("Verse Marker Right")			}			else{				//swap styles to make it possition correctly				new_note.appliedObjectStyle = myDocument.objectStyles.item("Verse Marker")			}				//		//$.writeln("get line number")			// this is for verse 2 where the chapter number covers it			line_number = myFinds[0].parentStory.insertionPoints.itemByRange(myFinds[0].paragraphs[0].index, myFinds[0].index).lines.length;			myvar=false			if ((line_number == 2 && myFinds[0].appliedParagraphStyle == myDocument.paragraphStyles.item("Verse1")) ||				(new_note.contents == 2 && line_number == 1 && myFinds[0].appliedParagraphStyle == myDocument.paragraphStyles.item("Verse"))) {				//$.writeln("if notes are stacked, move one")				myvar=true				new_note.anchoredObjectSettings.anchorXoffset = "-5.8mm"				//$.writeln("frame fitting 3rd time")				//new_note.fit(FitOptions.frameToContent);			}						if (verse_location =="left"){				new_note.appliedObjectStyle = myDocument.objectStyles.item("Verse Marker Right")			}			else{				//swap styles to make it possition correctly				new_note.appliedObjectStyle = myDocument.objectStyles.item("Verse Marker")			}				//		//$.writeln("get line number")			// this is for verse 2 where the chapter number covers it			if (myvar==true) {				//$.writeln("if notes are stacked, move one")				new_note.anchoredObjectSettings.anchorXoffset = "-5.8mm"				myvar=false				//$.writeln("frame fitting 3rd time")				//new_note.fit(FitOptions.frameToContent);			}					myFrame.parentStory.recompose()		}							//$.writeln("fixing space")		app.findGrepPreferences = null		app.findGrepPreferences.findWhat = "~>";		app.changeGrepPreferences.changeTo = "\\s"		try{			myFrame.changeGrep()		} catch(e){}// not needed?	//	try {			//$.writeln("fitting note to content")	//		new_note.fit(FitOptions.frameToContent);	//	} catch (e) {}$.writeln("adding reference text frame")		if (f_results) {			//$.writeln("if f results")			if (z == 0) {				//$.writeln("if z=0")				if (column == 2) {					//$.writeln("if col = 2 add cross frame")					myCrossFrame = addCrossreferenceTextFrame_right(myPage);					myCrossFrame.contents = f_results;					myCrossFrame.parentStory.appliedParagraphStyle = myDocument.paragraphStyles.item("crossReferenceright");					//$.writeln("end col =2")				} else {					//$.writeln("if not col 2 add cross frame")					myCrossFrame = addCrossreferenceTextFrame(myPage);					myCrossFrame.contents = f_results;					myCrossFrame.parentStory.appliedParagraphStyle = myDocument.paragraphStyles.item("crossReference");					//$.writeln("end if not col 2")				}			} else {				//$.writeln("if z!=0 add to cross frame")				myCrossFrame.contents = myCrossFrame.contents.concat(f_results);				}			f_results = "";			//$.writeln("crossReferenceLocation")			crossReferenceLocation(myFrame, myCrossFrame, myPage)		}		$.writeln("fix_stacked_verse_numbers")		fix_stacked_verse_numbers(myFrame)		//$.writeln("recompose")		myFrame.parentStory.recompose()		z = z + 1;		if (typeof myCrossFrame !== 'undefined') {			//$.writeln("get lastDate")			currentDate = get_last_date(myCrossFrame)				//alert(currentDate)		}	}	if (typeof myCrossFrame !== 'undefined') {	$.writeln("if myCrossFrame")		if (size == "large" || size == "small") {			$.writeln("remove_verse_numbers_from_cross_references")			remove_verse_numbers_from_cross_references(myCrossFrame)		} else {			$.writeln("else dateFormatFix")			dateFormatFix(myCrossFrame)		}	}}function fix_stacked_verse_numbers(myFrame) {	app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat = "~a";	myFound = myFrame.findGrep();	lastBaseline = 0	for (var f = 0; f < myFound.length; f++) {		if (myFound[f].textFrames[0].isValid) {			newBaseline = Math.round(myFound[f].textFrames[0].geometricBounds[0])			if (newBaseline == lastBaseline) {				with(myFound[f - 1].textFrames[0].baselineFrameGridOptions) {					useCustomBaselineFrameGrid = true					startingOffsetForBaselineFrameGrid = "3.5mm"					baselineFrameGridIncrement = "1pt"				}				with(myFound[f - 1].textFrames[0].anchoredObjectSettings) {					anchorYoffset = "-.9mm"				}				with(myFound[f].textFrames[0].baselineFrameGridOptions) {					useCustomBaselineFrameGrid = true					startingOffsetForBaselineFrameGrid = "2mm"					baselineFrameGridIncrement = "1pt"				}				with(myFound[f].textFrames[0].anchoredObjectSettings) {					anchorYoffset = "2.5mm"				}			}			if (myFound[f].textFrames[0].insertionPoints[0].horizontalOffset > 75 && size == "large") {				myFound[f].textFrames[0].appliedObjectStyle = myDocument.objectStyles.item("Verse Marker Right")			} else {}			lastBaseline = newBaseline		}	}}function get_last_date(myFrame) {	try{	app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat = "^\\d+\\s\\K\\d+\\s.+?$";	myFinds = myFrame.findGrep()		//alert(myFinds[myFinds.length-1].contents)	if (myFinds) {		return "00 " + myFinds[myFinds.length - 1].contents.concat(String.fromCharCode(13))	} else {		return ""	}}catch(e){app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat = "^\\d+\\s\\K.+\\s\\d+\\s.+?$";	myFinds = myFrame.findGrep()		//alert(myFinds[myFinds.length-1].contents)	if (myFinds) {		return "00 " + myFinds[myFinds.length - 1].contents.concat(String.fromCharCode(13))	} else {		return ""	}}}function addFootnoteTextFrame(aPage) {	var 		aFrame = aPage.textFrames.add(),		areFacing = app.activeDocument.documentPreferences.facingPages,		myBottom = main_frame_bottom,		myTop = myBottom - 3,		myLeft = meta.right_margin + meta.gutter;	myRight = meta.page_width - meta.left_margin;	//"left" means inside; "right" means outside.	if (areFacing && aPage.side == PageSideOptions.LEFT_HAND) {		myLeft = meta.left_margin,			myRight = meta.page_width - meta.right_margin - meta.gutter;	}	if (size == "large") {		myLeft = left_column_left		myRight = meta.page_width / 2 + meta.column_width / 2 + meta.right_margin	}	aFrame.geometricBounds = [myTop, myLeft, myBottom, myRight];	aFrame.textFramePreferences.autoSizingReferencePoint = AutoSizingReferenceEnum.BOTTOM_CENTER_POINT;	aFrame.textFramePreferences.autoSizingType = AutoSizingTypeEnum.HEIGHT_ONLY;	aFrame.textFramePreferences.insetSpacing = ["2mm", 0, 0, 0];	aFrame.textWrapPreferences.textWrapMode = TextWrapModes.BOUNDING_BOX_TEXT_WRAP;	return aFrame;}function addCrossreferenceTextFrame(aPage) {	var 		aFrame = aPage.textFrames.add(),		areFacing = app.activeDocument.documentPreferences.facingPages,		myBottom = main_frame_bottom,		myTop = meta.top_margin,		myLeft = meta.page_width - meta.left_margin + meta.gutter,		myRight = meta.page_width - meta.reference_margin;	//"left" means inside; "right" means outside.	if ((areFacing && aPage.side == PageSideOptions.LEFT_HAND)) {		myRight = meta.left_margin - meta.gutter,			myLeft = meta.reference_margin;	}	if (size == "large") {		myLeft = meta.left_margin,			myRight = left_column_left - meta.reference_gutter;	}	aFrame.geometricBounds = [myTop, myLeft, myBottom, myRight];	aFrame.textFramePreferences.insetSpacing = [1.6, 0, 0, 0];	return aFrame;}function addCrossreferenceTextFrame_right(aPage) {	var	aFrame = aPage.textFrames.add(),		areFacing = app.activeDocument.documentPreferences.facingPages,		myBottom = main_frame_bottom,		myTop = meta.top_margin,		myRight = meta.page_width - meta.right_margin + meta.gutter,		myLeft = meta.page_width - meta.reference_margin;	if (size == "large") {		myRight = right_column_right + meta.reference_gutter,		myLeft = meta.page_width - meta.right_margin;		//$.writeln("right reference frame: " + myRight + " " + myLeft)	}	//"left" means inside; "right" means outside.	aFrame.geometricBounds = [myTop, myLeft, myBottom, myRight];	aFrame.textFramePreferences.insetSpacing = [1.6, 0, 0, 0];	return aFrame;}function increment(value) {	return String.fromCharCode(value.charCodeAt(0) + 1);}function crossReferenceLocation(myFrame, myCrossFrame, myPage) {		if (size == "large") {		//$.writeln("set large line_space_adder")		line_space_adder = 2.77	} else {		//$.writeln("set other line_space_adder")		line_space_adder = 2.82	}	//$.writeln("format_cross_reference_verse_numbers")	format_cross_reference_verse_numbers(myPage, myCrossFrame);	//$.writeln("found cross grep")	app.findGrepPreferences = app.changeGrepPreferences = null;	app.findGrepPreferences.findWhat = "^\\K\\d+.+?$";	lastCross = "99999"	lastDate = "000"	foundCross = myCrossFrame.findGrep();	//$.writeln("starting foundCross.length loop with " + foundCross.length)	for (i = 0; i < foundCross.length; i++) {		//$.writeln("found cross: "+i)		// remove double dates that are on the same page		//$.writeln("myDateTest")		myDateTest = new RegExp(/^\d+..\d+\s.+?$/g)		if (myDateTest.test(foundCross[i].contents) == true) {			//$.writeln("if date test is true set date")			thisDate = String(foundCross[i].contents.match(/\b\d+\b/g)[1])			if (thisDate == lastDate) {				//$.writeln("if thisDate=lastDate")				app.findGrepPreferences = app.changeGrepPreferences = null;				app.findGrepPreferences.findWhat = foundCross[i].contents				found = myCrossFrame.findGrep()				found[found.length - 1].remove();				//$.writeln("end if thisDate=lastDate")			}			//$.writeln("end if datetest is true")		}		try{lastDate = thisDate}		catch(e){}		if (!myCrossFrame.overflows) {			//$.writeln("if myCrossFrame ! overflows")			myCrossLocation = foundCross[i].baseline;			// for verse 1			contents = String(foundCross[i].contents.match(/^\d+\b/g))			//$.writeln("cross contents: " + contents)			if (contents == 1 && contents !== lastCross) { //&& size !== "large"				//$.writeln("if contents = 1 or last")				app.findGrepPreferences = app.changeGrepPreferences = null;				app.findGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("ChapterNum");				try {					foundVerse = myFrame.findGrep();					//$.writeln("if statement to set adder")					if (foundVerse[0].baseline < myCrossLocation) {						myVerseLocation = foundVerse[1].baseline - line_space_adder * 2;						chapter = foundVerse[1].contents					} else {						myVerseLocation = foundVerse[0].baseline - line_space_adder * 2;						chapter = foundVerse[0].contents					}					//$.writeln("beginning while loop")					while (myCrossLocation < myVerseLocation && myCrossLocation && chapter != 1) {						//$.writeln("while..")						app.findGrepPreferences = app.changeGrepPreferences = null;						app.findGrepPreferences.findWhat = "(^\\<" + contents + "\\s.+?\\>)";						foundGrep = myCrossFrame.findGrep();						app.findGrepPreferences.findWhat = "(" + foundGrep[0].contents + ")"						app.changeGrepPreferences.changeTo = ("~b$1");						myCrossFrame.changeGrep();						myCrossLocation += line_space_adder;					}					//$.writeln("finished while loop")				} catch (e) {}			}			// for other chapters			else if (foundCross[i].contents !== 1) {				//$.writeln("if contents !=1")				//$.writeln("grep ~a")				var myBaseLine = 0				app.findGrepPreferences = app.changeGrepPreferences = null;				app.findGrepPreferences.findWhat = "~a";				myFound = myFrame.findGrep();				var F = myFound.length;				////$.writeln("for loop found length: "+ F)				for (var f = 0; f < F; f++)					////$.writeln("for loop iteration: " + f)					if (myFound[f].textFrames[0].isValid) {						//$.writeln("if valid, grep to find basline")						app.findGrepPreferences.findWhat = "\\<" + contents + "\\>";						app.findGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("VerseNum");						founds2 = myFound[f].textFrames[0].findGrep()						if (founds2[0]) {							//$.writeln("if valid grep, get basline")							myBaseLine = founds2[0].baseline							break						}					}				try {					// greatest of found verse or of the first word in frame.. for 2 column to push the first date down to the right level... hopefully :)					//$.writeln("calculating myVerseLocation")					myVerseLocation = Math.max((first_baseline - line_space_adder * 3) || 0, (myBaseLine - line_space_adder) || 0);					//alert(myVerseLocation, myCrossLocation)					////$.writeln("myVerseLocation: " + myVerseLocation + "myCrossLocation: "+ myCrossLocation)					//$.writeln("starting while loop")					while (myCrossLocation < myVerseLocation && myCrossLocation && !myCrossFrame.overflows) {						//$.writeln("while..")							////$.writeln("foundcross contents: " + foundCross[i].contents);							////$.writeln("mybaseline: " + myBaseLine)							////$.writeln("contents: " + contents)							////$.writeln("grep to change spacing")						app.findGrepPreferences = app.changeGrepPreferences = null;						app.findGrepPreferences.findWhat = "(^\\<" + contents + "\\>)";						app.changeGrepPreferences.changeTo = ("~b$1");						myCrossFrame.changeGrep();						myCrossLocation += line_space_adder;						////$.writeln("myCrossLocation: " + myCrossLocation)										}					//$.writeln("left while loop")				} catch (e) {}			}			//$.writeln("left if contents!=1")			lastCross = contents		} else {}		//$.writeln("left crosframe not overflows")	}	//} catch (e) {}	//$.writeln("starting while crossframe overflows")	while (myCrossFrame.overflows) {		//$.writeln("grep to remove double spaces")		app.findGrepPreferences = app.changeGrepPreferences = null;		app.findGrepPreferences.findWhat = "~b~b";		try {			found = myCrossFrame.findGrep();			myTextToRemove = found[found.length - 1].insertionPoints[0].parentStory.characters[(found[found.length - 1].insertionPoints[0].index + 1)].remove();		} catch (e) {}	}	////$.writeln("finished while cf overflow")	//$.writeln("finished crossReferenceLocation function")}function RoundNumbers(doc) {	var err;	try {		var theParas = doc.stories.everyItem().paragraphs.everyItem().getElements().slice(0)	} catch (err) {		var theParas = []	}	for (var i = 0; i < theParas.length; i++) {		try {			var theText = theParas[i];						theText.leftIndent = Math.round(theText.leftIndent * 10) / 10;					} catch (e) {}	}}function insert_notes_and_references(myFrame) {	var myFindChangeFile, myScriptFile, myResult;	var myFindChangeArray, myFindVerse, myFindChapter, myChangeText;	var myStartCharacter, myEndCharacter;	//var myFindChangeFile = myFindFile("/note&cf.txt")	var myFindChangeFile = "/Users/christopher/Google Drive/Darby Bible Project/scripts/darby/note&cf.txt"	if (myFindChangeFile != null) {		myFindChangeFile = File(myFindChangeFile);		var myResult = myFindChangeFile.open("r", undefined, undefined);		if (myResult == true) {			//Loop through the find/change operations.			do {				myLine = myFindChangeFile.readln();				myFindChangeArray = myLine.split("\t");				myFindBook = myFindChangeArray[0];				myFindType = myFindChangeArray[1];				myFindChapter = myFindChangeArray[2];				myFindVerse = myFindChangeArray[3];				myFindWordNum = myFindChangeArray[4];				myFindWordNum = myFindWordNum - 1;				myFindWord = myFindChangeArray[5];				myChangeText = myFindChangeArray[6];				//alert(myFindBook.toUpperCase() + " " + book_name.toUpperCase());				switch (myFindType) {					case "note":						insertFootnote(myFrame, myFindBook, myFindChapter, myFindVerse, myFindWordNum, myFindWord, myChangeText);						break;					case "cross":						insertCross(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText, 'cross');						break;					case "heading":						insertHeading(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText);						break;					case "date":						insertCross(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText, 'date');						break;				}			} while (myFindChangeFile.eof == false);			myFindChangeFile.close();		}	}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = ";";		app.changeGrepPreferences.changeTo = ";~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = "-";		app.changeGrepPreferences.changeTo = "-~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = "\\*";		app.changeGrepPreferences.changeTo = "*~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = ",";		app.changeGrepPreferences.changeTo = ",~k";		myFrame.parentStory.changeGrep()	} catch (e) {}	try {		app.changeGrepPreferences = app.findGrepPreferences = null;		app.findGrepPreferences.findWhat = "~~";		app.changeGrepPreferences.changeTo = "~~~k";		myFrame.parentStory.changeGrep()	} catch (e) {}}function insertFootnote(myFrame, myFindBook, myFindChapter, myFindVerse, myFindWordNum, myFindWord, myChangeText) {	if (myFindBook.toUpperCase() == book_name.toUpperCase()) {		//alert(myFindBook.toUpperCase() + book_name.toUpperCase())		if (myFindVerse == 1 || myFindWordNum <= 0) { // && myFindWordNum  != -1){			//alert(myFindWordNum);			if (myFindWordNum <= 0 && myFindVerse == 1) {				app.changeGrepPreferences = app.findGrepPreferences = null;				app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<\\K";				//app.findGrepPreferences.findWhat = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"			} else {				app.changeGrepPreferences = app.findGrepPreferences = null;				app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<\\K(?=" + myFindWord + ")";				//app.findGrepPreferences.findWhat = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"			}		} else {			app.changeGrepPreferences = app.findGrepPreferences = null;			//alert(myFindChapter + ":" + myFindVerse+ " " + myFindWord + " " + myFindWordNum);			app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<" + myFindVerse + "(~%|\\t)+(\\b\\w+?(-\\b\\w+?)?\\b.+?){" + myFindWordNum + "}\\<\\K(?=" + myFindWord + ")";			//app.findGrepPreferences.findWhat = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"		}		try {			me = myFrame.parentStory.findGrep();			me1 = me[0].insertionPoints[0];			me1.contents = myChangeText;		} catch (e) {			try {				app.changeGrepPreferences = app.findGrepPreferences = null;				app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<" + myFindVerse + "(~%|\\t)+[^\"]+?\\<\\K(?=" + myFindWord + ")";				try {					me = myFrame.parentStory.findGrep();					me1 = me[0].insertionPoints[0];					me1.contents = myChangeText;				} catch (e) {}			} catch (e) {}		}	}}function insertCross(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText, type) {	//if(type == 'date'){$.writeln('verse = ' + myFindVerse + 'text = ' + myChangeText)}	if (myFindBook.toUpperCase() == book_name.toUpperCase()) {		if (myFindVerse == 1) {			//alert(myFindVerse);			app.changeGrepPreferences = app.findGrepPreferences = null;			//	app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b(\\t+)?\\<\\K";			app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b(\\t+)?\\K";		} else {			//alert(myFindVerse);			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "(PSALM |Chapter )" + myFindChapter + "~b[^\"]+?\\<" + myFindVerse + "(~%|\\t)+\\K";		}		if (me = myFrame.parentStory.findGrep() != "") {			me = myFrame.parentStory.findGrep()			me1 = me[0].insertionPoints[0];			if (type == 'date') {				me1.contents = '{' + myFindVerse + ' ' + myChangeText + '}'			} else {				me1.contents = myChangeText			};		}	}}function insertHeading(myFrame, myFindBook, myFindChapter, myFindVerse, myChangeText) {	if (myFindBook.toUpperCase() == book_name.toUpperCase()) {		if (myFindVerse == 1) {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "Chapter\\s" + myFindChapter + "~b";			try {				me = myFrame.parentStory.findGrep()				me1 = me[0].insertionPoints[0];				me1.contents = myChangeText + String.fromCharCode(13);			} catch (e) {}		} else {			app.changeGrepPreferences = app.findGrepPreferences = null;			app.findGrepPreferences.findWhat = "Chapter " + myFindChapter + "~b[^\"]+?\\K(?=\\s\\<" + myFindVerse + ")";			try {				me = myFrame.parentStory.findGrep()				me1 = me[0].insertionPoints[0];				me1.contents = myChangeText + String.fromCharCode(13);			} catch (e) {}		}	}}function sectionMarkers(myFrame) {	app.findGrepPreferences = app.changeGrepPreferences = null;	if (book_name.toUpperCase() != 'PSALMS') {		app.findGrepPreferences.findWhat = "0(?=\\n|~b)";		try {			if (myFinds = myFrame.findGrep() != "") {				myFinds = myFrame.findGrep();				flq = myFinds.length;				while (flq--) {					var new_note = myFinds[flq].paragraphs[0].insertionPoints[0].textFrames.add({						appliedObjectStyle: myDocument.objectStyles.item("Section Marker"),						appliedParagraphStyle: myDocument.paragraphStyles.item("Section Marker")					});					myFinds[flq].parentStory.insertionPoints.itemByRange(myFinds[flq].texts[0].insertionPoints[0].index + 1, myFinds[flq].texts[0].insertionPoints[-1].index + 1).texts[0].move(LocationOptions.atBeginning, new_note.insertionPoints[0]);					new_note.parentStory.characters.item(0).appliedParagraphStyle = myDocument.paragraphStyles.item("Section Marker");					new_note.fit(FitOptions.frameToContent);					with(new_note.anchoredObjectSettings) {						anchoredPosition = AnchorPosition.anchored;						anchorPoint = AnchorPoint.BOTTOM_LEFT_ANCHOR;						horizontalReferencePoint = AnchoredRelativeTo.TEXT_FRAME;						horizontalAlignment = HorizontalAlignment.leftAlign;						verticalReferencePoint = VerticallyRelativeTo.LINE_BASELINE;					}					new_note.geometricBounds = [new_note.geometricBounds[0], new_note.geometricBounds[3] - 3, new_note.geometricBounds[2], new_note.geometricBounds[3]];				}			}		} catch (e) {}	} else {		app.findGrepPreferences.findWhat = "(0)(?= PSALM)";		app.changeGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("Section Marker");		app.changeGrepPreferences.changeTo = "$1";		myFrame.parentStory.changeGrep();	}}function move_chapter_numbers_to_anchored_frames(myPage, myFrame) {	// working in column 1 or column 2??	if (((Math.round(myFrame.geometricBounds[3] - 4) < (myPage.bounds[3] - myPage.bounds[1]) / 2) && size == "large") || size == "small") {		column = 1	} else {		column = 2	}	app.changeGrepPreferences = app.findGrepPreferences = null;	app.findGrepPreferences.appliedCharacterStyle = myDocument.characterStyles.item("ChapterNum")	app.findGrepPreferences.findWhat = "\\<\\d\\>";	newFrameBaseline = 0	var lastNote	try {		if (myFinds = myFrame.findGrep() != "") {			myFinds = myFrame.findGrep();			flq = myFinds.length;			if (column == 2 || (size == "small" && myPage.side == PageSideOptions.RIGHT_HAND)) {						chapter_location = "right"					} else {						chapter_location = "left"					}			while (flq--) {				if (myFinds[flq].appliedParagraphStyle == myDocument.paragraphStyles.item("Verse1")) {					var new_note = myFinds[flq].insertionPoints[0].textFrames.add();					myFinds[flq].parentStory.insertionPoints.itemByRange(myFinds[flq].texts[0].insertionPoints[0].index + 1, myFinds[flq].texts[0].insertionPoints[-1].index + 1).texts[0].move(LocationOptions.atBeginning, new_note.insertionPoints[0]);					new_note.parentStory.characters.item(0).appliedParagraphStyle = myDocument.paragraphStyles.item("ChapterNum")					new_note.fit(FitOptions.frameToContent);					if (chapter_location == "right") {						new_note.appliedObjectStyle = myDocument.objectStyles.item("Chapter Marker Right")					} else {						new_note.appliedObjectStyle = myDocument.objectStyles.item("Chapter Marker")					}					new_note.fit(FitOptions.frameToContent);				}				app.findGrepPreferences = null				app.findGrepPreferences.findWhat = "~>";				app.changeGrepPreferences.changeTo = "\\s"				myFrame.changeGrep()				new_note.fit(FitOptions.frameToContent);				new_note.anchoredObjectSettings.releaseAnchoredObject();			}		}	} catch (e) {}	app.findGrepPreferences = app.changeGrepPreferences = null	app.findGrepPreferences.findWhat = "^\\K~%"	app.changeGrepPreferences.changeTo = '\\t'	try {		myFrame.changeGrep()	} catch (e) {}}function change_style_on_headings_in_col_2(myFrame) {	app.changeGrepPreferences = app.findGrepPreferences = null;	app.findGrepPreferences.appliedParagraphStyle = myDocument.paragraphStyles.item("SectionHeading")	app.findGrepPreferences.findWhat = "^.+$";	app.changeGrepPreferences.appliedParagraphStyle = myDocument.paragraphStyles.item("SectionHeadingRight")	try {		myFrame.changeGrep()	} catch (e) {}}function release_anchored_objects() { // bug in ID	var a = app.activeDocument.allPageItems,		t;	while (t = a.pop()) {		t.isValid &&			t.hasOwnProperty('anchoredObjectSettings') &&			(t.parent instanceof Character) &&			(t = t.anchoredObjectSettings).isValid &&			t.releaseAnchoredObject();	}}function myFindFile(myFilePath) {	var myScriptFile = myGetScriptPath();	var myScriptFile = File(myScriptFile);	var myScriptFolder = myScriptFile.path;	myFilePath = myScriptFolder + myFilePath;	if (File(myFilePath).exists == false) {		//Display a dialog.		myFilePath = File.openDialog("Choose the file containing your find/change list");	}	return myFilePath;}function myGetScriptPath() {	try {		myFile = app.activeScript;	} catch (myError) {		myFile = myError.fileName;	}	return myFile;}